name: Deploy to AWS ECS

on:
  push:
    branches:
      - main
      - feature/*
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Debugging AWS CLI setup
      - name: Debug AWS CLI Setup
        run: |
          echo "Checking AWS CLI version..."
          aws --version
          echo "Listing ECR repositories..."
          aws ecr describe-repositories --region ap-southeast-2

      # Step 5: Build and Push Docker Image to ECR
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=$(date +%s)
          REPOSITORY_URI="535002867297.dkr.ecr.ap-southeast-2.amazonaws.com/treasure-hunt-repo"
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg AWS_REGION=ap-southeast-2 \
            --build-arg S3_BUCKET_NAME=treasure-hunt-env-bucket \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -t $REPOSITORY_URI:$IMAGE_TAG \
            -t $REPOSITORY_URI:latest .  
          echo "Pushing Docker image to ECR..."
          docker push $REPOSITORY_URI:latest
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "REPOSITORY_URI=$REPOSITORY_URI" >> $GITHUB_ENV
        # Debug steps to verify Docker setup
        continue-on-error: true

      # Step 7: Deploy to ECS
      - name: Deploy to ECS
        run: |
          CLUSTER_NAME="treasure-hunt-cluster"
          SERVICE_NAME="treasure-hunt-service"

          echo "Fetching existing task definition..."
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition treasure-hunt-task | jq -r '.taskDefinition')

          echo "Updating container image in the task definition..."
          UPDATED_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$REPOSITORY_URI:$IMAGE_TAG" '
            del(
              .taskDefinitionArn,
              .revision,
              .status,
              .registeredAt,
              .registeredBy,
              .requiresAttributes,
              .compatibilities
            ) |
            .containerDefinitions[0].image = $IMAGE
          ')

          echo "Saving updated task definition to temporary file..."
          echo "$UPDATED_TASK_DEFINITION" > updated-task-definition.json

          echo "Registering new task definition..."
          aws ecs register-task-definition --cli-input-json file://updated-task-definition.json

          echo "Updating ECS service with the new task definition..."
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          REPOSITORY_URI: ${{ env.REPOSITORY_URI }}